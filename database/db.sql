DROP DATABASE IF EXISTS OFS;

CREATE DATABASE OFS;

USE OFS;

-- TABLE FOR LOGIN DETAILS
CREATE TABLE LOGIN (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    EMAIL VARCHAR(255) NOT NULL UNIQUE,
    PASSWORD VARCHAR(255) NOT NULL,
    ACCOUNTCREATIONDATE DATE NOT NULL,
    ROLE ENUM('admin', 'customer', 'supplier', 'employee') NOT NULL DEFAULT 'customer'
);

-- TABLE FOR GENERAL INFO
CREATE TABLE INFO (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    LOGINID INT NOT NULL,
    ADDRESS VARCHAR(255),
    LATITUDE DECIMAL(10, 8),
    LONGITUDE DECIMAL(11, 8),
    PHONE VARCHAR(20),
    FOREIGN KEY (LOGINID) REFERENCES LOGIN(ID) ON DELETE CASCADE
);

-- TABLE FOR EMPLOYEES
CREATE TABLE EMPLOYEES (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    LOGINID INT NOT NULL,
    FIRSTNAME VARCHAR(255),
    LASTNAME VARCHAR(255),
    SSN CHAR(64),  -- ASSUMING THE SSN IS HASHED
    EMAIL VARCHAR(255),
    PHONE VARCHAR(20),
    ADDRESS VARCHAR(255),
    SALARY DECIMAL(10, 2),  -- HOURLY SALARY
    STARTDATE DATE,
    ENDDATE DATE,
    FOREIGN KEY (LOGINID) REFERENCES LOGIN(ID) ON DELETE CASCADE
);

-- TABLE FOR EMPLOYEE HOURS
CREATE TABLE EMPLOYEE_HOURS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    EMPLOYEEID INT NOT NULL,
    HOURSWORKED DECIMAL(5, 2),  -- BI-WEEKLY BASIS
    FOREIGN KEY (EMPLOYEEID) REFERENCES EMPLOYEES(ID) ON DELETE CASCADE
);

-- TABLE FOR PRODUCT CATEGORY
CREATE TABLE PRODUCT_CATEGORY (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CATEGORYNAME VARCHAR(255) NOT NULL
);

-- PRODUCT CATEGORIES ARE HARDCODED IN
INSERT INTO PRODUCT_CATEGORY (CATEGORYNAME)
VALUES ('Fruits'),
       ('Vegetables'),
       ('Meats'),
       ('Dairy'),
       ('Snacks'),
       ('Meals');

-- TABLE FOR PRODUCTS
CREATE TABLE PRODUCTS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CATEGORYID INT,
    PRODUCTNAME VARCHAR(255),
    PRODUCTDESCRIPTION TEXT,
    BRAND VARCHAR(255),  -- Brand of the product
    PICTURE_URL VARCHAR(255),  -- URL to product image
    QUANTITY INT,
    REORDERLEVEL INT,
    REORDERQUANTITY INT,
    PRICE DECIMAL(10, 2),
    WEIGHT DECIMAL(5, 2),  -- PER UNIT
    FOREIGN KEY (CATEGORYID) REFERENCES PRODUCT_CATEGORY(ID) ON DELETE SET NULL
);

-- TABLE FOR SUPPLIERS
CREATE TABLE SUPPLIERS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    LOGINID INT NOT NULL,
    SUPPLIERNAME VARCHAR(255),
    EMAIL VARCHAR(255),
    PHONE VARCHAR(20),
    ADDRESS VARCHAR(255),
    FOREIGN KEY (LOGINID) REFERENCES LOGIN(ID) ON DELETE CASCADE
);

-- TABLE FOR CUSTOMERS
CREATE TABLE CUSTOMERS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    LOGINID INT NOT NULL,
    FIRSTNAME VARCHAR(255),
    LASTNAME VARCHAR(255),
    PHONE VARCHAR(20),
    ADDRESS VARCHAR(255),
    LATITUDE DECIMAL(10, 8),
    LONGITUDE DECIMAL(11, 8),
    FOREIGN KEY (LOGINID) REFERENCES LOGIN(ID) ON DELETE CASCADE
);

-- TABLE FOR SALES
CREATE TABLE SALES (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    CUSTOMERID INT,
    PRICE DECIMAL(10, 2), -- TOTAL PRICE
    SALEDATE DATE,
    PAYMENTDETAILS VARCHAR(255),
    SALE_STATUS ENUM('NOT STARTED', 'ONGOING', 'COMPLETED') NOT NULL,
    FOREIGN KEY (CUSTOMERID) REFERENCES CUSTOMERS(ID) ON DELETE SET NULL
);

-- TABLE FOR SALES PRODUCTS
CREATE TABLE SALES_PRODUCTS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    SALESID INT NOT NULL,
    PRODUCTID INT NOT NULL,
    QUANTITY INT,
    PRICE DECIMAL(10, 2),  -- PRICE ACCOUNTED FOR QUANTITY
    FOREIGN KEY (SALESID) REFERENCES SALES(ID) ON DELETE CASCADE,
    FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(ID)
);

-- TABLE FOR ORDERS
CREATE TABLE ORDERS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    PRICE DECIMAL(10, 2),  -- TOTAL PRICE
    ORDERDATE DATE,
    PAYMENTDETAILS VARCHAR(255),  -- TBD ONCE STRIPE IS INTEGRATED
    SUPPLIERID INT,
    ORDER_STATUS ENUM('NOT STARTED', 'ONGOING', 'COMPLETED') NOT NULL,
    FOREIGN KEY (SUPPLIERID) REFERENCES SUPPLIERS(ID) ON DELETE SET NULL
);

-- TABLE FOR ORDERS PRODUCTS
CREATE TABLE ORDERS_PRODUCTS (
    ID INT PRIMARY KEY AUTO_INCREMENT,
    ORDERID INT NOT NULL,
    PRODUCTID INT NOT NULL,
    QUANTITY INT,
    PRICE DECIMAL(10, 2),  -- PRICE ACCOUNTED FOR QUANTITY
    FOREIGN KEY (ORDERID) REFERENCES ORDERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(ID)
);

-- TABLE FOR BALANCE
CREATE TABLE BALANCE (
    ID INT PRIMARY KEY,
    BALANCE DECIMAL(10, 2),
    TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Insert initial balance record
INSERT INTO BALANCE (ID, BALANCE) VALUES (1, 0.00);

-- Indexes
CREATE UNIQUE INDEX idx_login_email ON LOGIN(EMAIL);
CREATE INDEX idx_products_productname ON PRODUCTS(PRODUCTNAME);
CREATE INDEX idx_suppliers_email ON SUPPLIERS(EMAIL);
CREATE INDEX idx_info_loginid ON INFO(LOGINID);
CREATE INDEX idx_employees_loginid ON EMPLOYEES(LOGINID);
CREATE INDEX idx_customers_loginid ON CUSTOMERS(LOGINID);
CREATE INDEX idx_suppliers_loginid ON SUPPLIERS(LOGINID);
CREATE INDEX idx_employee_hours_employeeid ON EMPLOYEE_HOURS(EMPLOYEEID);
CREATE INDEX idx_products_categoryid ON PRODUCTS(CATEGORYID);
CREATE INDEX idx_sales_customerid ON SALES(CUSTOMERID);
CREATE INDEX idx_orders_supplierid ON ORDERS(SUPPLIERID);
CREATE INDEX idx_sales_products_salesid_productid ON SALES_PRODUCTS(SALESID, PRODUCTID);
CREATE INDEX idx_orders_products_orderid_productid ON ORDERS_PRODUCTS(ORDERID, PRODUCTID);

DELIMITER //

-- Trigger to update BALANCE after a SALE is inserted
CREATE TRIGGER trg_after_sale_insert
AFTER INSERT ON SALES
FOR EACH ROW
BEGIN
    UPDATE BALANCE
    SET BALANCE = BALANCE + NEW.PRICE
    WHERE ID = 1;
END //

-- Trigger to update BALANCE after a SALE is deleted
CREATE TRIGGER trg_after_sale_delete
AFTER DELETE ON SALES
FOR EACH ROW
BEGIN
    UPDATE BALANCE
    SET BALANCE = BALANCE - OLD.PRICE
    WHERE ID = 1;
END //

-- Trigger to update BALANCE after an ORDER is inserted
CREATE TRIGGER trg_after_order_insert
AFTER INSERT ON ORDERS
FOR EACH ROW
BEGIN
    UPDATE BALANCE
    SET BALANCE = BALANCE - NEW.PRICE
    WHERE ID = 1;
END //

-- Trigger to update BALANCE after an ORDER is deleted
CREATE TRIGGER trg_after_order_delete
AFTER DELETE ON ORDERS
FOR EACH ROW
BEGIN
    UPDATE BALANCE
    SET BALANCE = BALANCE + OLD.PRICE
    WHERE ID = 1;
END //

-- Trigger to decrease PRODUCT QUANTITY after a SALES_PRODUCTS is inserted
CREATE TRIGGER trg_after_sales_products_insert
AFTER INSERT ON SALES_PRODUCTS
FOR EACH ROW
BEGIN
    UPDATE PRODUCTS
    SET QUANTITY = QUANTITY - NEW.QUANTITY
    WHERE ID = NEW.PRODUCTID;
END //

-- Trigger to increase PRODUCT QUANTITY after a SALES_PRODUCTS is deleted
CREATE TRIGGER trg_after_sales_products_delete
AFTER DELETE ON SALES_PRODUCTS
FOR EACH ROW
BEGIN
    UPDATE PRODUCTS
    SET QUANTITY = QUANTITY + OLD.QUANTITY
    WHERE ID = OLD.PRODUCTID;
END //

-- Trigger to increase PRODUCT QUANTITY after an ORDERS_PRODUCTS is inserted
CREATE TRIGGER trg_after_orders_products_insert
AFTER INSERT ON ORDERS_PRODUCTS
FOR EACH ROW
BEGIN
    UPDATE PRODUCTS
    SET QUANTITY = QUANTITY + NEW.QUANTITY
    WHERE ID = NEW.PRODUCTID;
END //

-- Trigger to decrease PRODUCT QUANTITY after an ORDERS_PRODUCTS is deleted
CREATE TRIGGER trg_after_orders_products_delete
AFTER DELETE ON ORDERS_PRODUCTS
FOR EACH ROW
BEGIN
    UPDATE PRODUCTS
    SET QUANTITY = QUANTITY - OLD.QUANTITY
    WHERE ID = OLD.PRODUCTID;
END //

DELIMITER ;